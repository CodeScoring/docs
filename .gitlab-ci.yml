stages:
  - lint

lint_markdown:
  stage: lint
  script:
    - echo "Starting markdown linting..."
    - which git grep sed tr awk wget curl || echo "Some tools missing"
    - |
      if [ -n "$CI_MERGE_REQUEST_DIFF_BASE_SHA" ]; then
        BASE_REF="$CI_MERGE_REQUEST_DIFF_BASE_SHA"
      else
        git fetch origin main || { echo "Failed to fetch origin/main"; exit 1; }
        BASE_REF="origin/main"
      fi

      FILES=$(git diff --name-only "$BASE_REF"...HEAD -- '*.md') || { echo "Failed to get changed files"; exit 1; }

      if [ -z "$FILES" ]; then
        echo "No .md files changed."
        exit 0
      fi

      echo "Changed files: $FILES"
      ERROR_FOUND=false

      # Функция генерации якоря в стиле MkDocs Material
      generate_anchor() {
        echo "$1" | \
          iconv -c -t ascii//TRANSLIT | \
          tr '[:upper:]' '[:lower:]' | \
          sed 's/[^a-z0-9 -]//g' | \
          sed 's/[[:space:]]\+/-/g' | \
          sed 's/-\+/-/g; s/^-//; s/-$//'
      }

      echo "Checking trailing spaces..."
      for file in $FILES; do
        if grep -n '[[:blank:]]$' "$file" 2>/dev/null; then
          echo "Trailing spaces in $file"
          ERROR_FOUND=true
        fi
      done

      [ "$ERROR_FOUND" = false ] && echo "No trailing spaces."

      echo "Checking internal links..."
      for file in $FILES; do
        echo "Processing $file..."
        LINKS=$(grep -oP '\[.*?\]\(\K(?:#[^\s)]+|/[^\s)]+#[^\s)]+)' "$file" | sed 's/^\(#[^/]\+\|\/[^#]\+#\)/\1/' || true)
        if [ -n "$LINKS" ]; then
          while IFS= read -r link; do
            [ -z "$link" ] && continue
            if echo "$link" | grep -q '^#'; then
              TARGET_FILE="$file"
              ANCHOR=$(echo "$link" | sed 's/^#//')
            else
              TARGET_FILE=$(echo "$link" | sed 's/#.*$//; s|^/||; s|/$||; s|$|.md|')
              ANCHOR=$(echo "$link" | sed 's|^.*/#||')
              TARGET_FILE="docs/$TARGET_FILE"
            fi
            if [ -f "$TARGET_FILE" ]; then
              HEADERS=$(grep '^#' "$TARGET_FILE" | sed 's/^#\+ *//')
              ANCHORS=""
              while IFS= read -r header; do
                anchor=$(generate_anchor "$header")
                ANCHORS="$ANCHORS"$'\n'"$anchor"
              done <<< "$HEADERS"
              if ! echo "$ANCHORS" | grep -Fxq "$ANCHOR"; then
                echo "Broken internal link '$link' in $file (anchor '$ANCHOR' not found in $TARGET_FILE)"
                ERROR_FOUND=true
              else
                echo "Anchor '$ANCHOR' found in $TARGET_FILE"
              fi
            else
              echo "Broken internal link '$link' in $file (target file $TARGET_FILE not found)"
              ERROR_FOUND=true
            fi
          done <<< "$LINKS"
        else
          echo "No internal links in $file"
        fi
      done

      echo "Checking URLs..."
      if command -v wget >/dev/null; then
        for file in $FILES; do
          URLS=$(grep -oP '(?:\[.*?\]\(\Khttp[s]?://[^\s)]+|(?<!\]\()http[s]?://[^\s>]+)' "$file" | grep -v 'example' || true)
          if [ -n "$URLS" ]; then
            while IFS= read -r url; do
              if ! wget --spider --timeout=5 --tries=1 "$url" 2>/dev/null; then
                echo "Broken URL: $url in $file"
                ERROR_FOUND=true
              fi
            done <<< "$URLS"
          else
            echo "No URLs (excluding example) in $file"
          fi
        done
      elif command -v curl >/dev/null; then
        for file in $FILES; do
          URLS=$(grep -oP '(?:\[.*?\]\(\Khttp[s]?://[^\s)]+|(?<!\]\()http[s]?://[^\s>]+)' "$file" | grep -v 'example' || true)
          if [ -n "$URLS" ]; then
            while IFS= read -r url; do
              if ! curl --silent --head --fail "$url" --connect-timeout 3 --max-time 5 2>/dev/null; then
                echo "Broken URL: $url in $file"
                ERROR_FOUND=true
              fi
            done <<< "$URLS"
          else
            echo "No URLs (excluding example) in $file"
          fi
        done
      else
        echo "Neither wget nor curl found, skipping URL checks"
      fi

      if [ "$ERROR_FOUND" = true ]; then
        echo "Linting failed."
        exit 1
      else
        echo "All checks passed."
        exit 0
      fi