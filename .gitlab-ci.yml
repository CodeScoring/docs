stages:
  - lint

lint_markdown:
  stage: lint
  before_script:
    - git config --global user.email "ci-bot@example.com"
    - git config --global user.name "CI Bot"
  script: |
    echo "Starting markdown linting..."

    BASE_REF="${CI_MERGE_REQUEST_DIFF_BASE_SHA:-origin/main}"
    [ -z "$CI_MERGE_REQUEST_DIFF_BASE_SHA" ] && git fetch origin main || { echo "‚ùå Failed to fetch origin/main"; exit 1; }

    FILES=$(git diff --name-only --diff-filter=d "$BASE_REF"...HEAD -- '*.md') || { echo "‚ùå Failed to get changed files"; exit 1; }
    [ -z "$FILES" ] && { echo "‚ÑπÔ∏è No .md files changed."; exit 0; }

    echo "üìÑ Changed files: $FILES"
    ERROR_FOUND=false

    # Auto-fix trailing spaces
    for file in $FILES; do
      if grep -n '[[:blank:]]$' "$file" 2>/dev/null; then
        echo "‚ö†Ô∏è Trailing spaces detected in $file. Fixing..."
        sed -i 's/[[:blank:]]\+$//' "$file"
      fi
    done

    # Check if there are changes to commit
    if ! git diff --quiet; then
      echo "‚úçÔ∏è Committing auto-fixes..."
      git add $FILES
      git commit -m "chore(ci): auto-fix trailing spaces"
      echo "‚¨ÜÔ∏è Pushing fixes back to branch $CI_COMMIT_REF_NAME"
      git push "https://oauth2:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" HEAD:$CI_COMMIT_REF_NAME
    else
      echo "‚úÖ No trailing spaces to fix."
    fi

    # Continue with other checks (links, urls, etc.)
    echo "‚ÑπÔ∏è Running link and URL checks..."

      # Internal links
      for file in $FILES; do
        echo "Processing $file..."
        LINKS=$(grep -oP '\[.*?\]\(\K(?:#[^\s)]+|/[^\s)]+#[^\s)]+)' "$file" || true)
        if [ -n "$LINKS" ]; then
          echo "Found links: $LINKS"
          while IFS= read -r link; do
            [ -z "$link" ] && continue
            if echo "$link" | grep -q '^#'; then
              TARGET_FILE="$file"
              ANCHOR="${link#\#}"
            else
              PATH_PART=$(echo "$link" | sed 's/#.*$//; s|^/||; s|/$||')
              TARGET_FILE="docs/${PATH_PART}.md"
              ANCHOR="${link##*#}"
            fi

            if [ -f "$TARGET_FILE" ]; then
              HEADINGS=$(grep -E '^#{1,6} ' "$TARGET_FILE" | sed 's/^#\+ //')
              GENERATED_ANCHORS=""
              COUNT=1
              while IFS= read -r heading; do
                lower=$(echo "$heading" | tr '[:upper:]' '[:lower:]')
                safe=$(echo "$lower" | iconv -c -t ascii//TRANSLIT | sed 's/[^a-z0-9]/-/g; s/-\+/-/g; s/^-//; s/-$//')
                anchor=$([ -z "$safe" ] && echo "_$COUNT" || echo "$safe")
                COUNT=$((COUNT + 1))
                GENERATED_ANCHORS="$GENERATED_ANCHORS\n$anchor"
              done <<< "$HEADINGS"

              if echo "$ANCHOR" | grep -qE '^[0-9]{6,}-[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
                ANCHOR_VERSION=$(echo "$ANCHOR" | sed 's/-[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$//')
                ANCHOR_DATE=$(echo "$ANCHOR" | sed 's/^[0-9]\{6,\}-//')
                FOUND=false
                while IFS= read -r heading; do
                  if echo "$heading" | grep -qE '\[[0-9]+\.[0-9]+\.[0-9]+\] - [0-9]{4}-[0-9]{2}-[0-9]{2}'; then
                    HEADING_VERSION=$(echo "$heading" | grep -oP '\[\K[0-9]+\.[0-9]+\.[0-9]+' | sed 's/\.//g')
                    HEADING_DATE=$(echo "$heading" | grep -oP '[0-9]{4}-[0-9]{2}-[0-9]{2}')
                    [ "$HEADING_VERSION" = "$ANCHOR_VERSION" ] && [ "$HEADING_DATE" = "$ANCHOR_DATE" ] && FOUND=true
                  fi
                done <<< "$HEADINGS"
                if [ "$FOUND" = true ]; then
                  echo "‚úÖ Version anchor '$ANCHOR' found in $TARGET_FILE"
                else
                  echo "‚ùå Broken version anchor '$link' in $file (anchor '$ANCHOR' not found)"
                  echo "üîç Debug: Headings in $TARGET_FILE:"
                  echo "$HEADINGS" | sed 's/^/  - /'
                  ERROR_FOUND=true
                fi
              elif ! echo -e "$GENERATED_ANCHORS" | grep -Fxq "$ANCHOR"; then
                echo "‚ùå Broken internal link '$link' in $file (anchor '$ANCHOR' not found)"
                echo "üîç Debug: Generated anchors in $TARGET_FILE:"
                echo "$GENERATED_ANCHORS" | sed 's/^/  - /'
                ERROR_FOUND=true
              else
                echo "‚úÖ Anchor '$ANCHOR' found in $TARGET_FILE"
              fi
            else
              echo "‚ùå Broken internal link '$link' in $file (target file $TARGET_FILE not found)"
              ERROR_FOUND=true
            fi
          done <<< "$LINKS"
        else
          echo "‚ÑπÔ∏è No internal links in $file"
        fi
      done

      # URLs
      IGNORED_DOMAINS='example|gitflic\.ru|localhost|127\.0\.0\.1|tip\.kaspersky\.com|JFROG_URL|host|jfrog\.my\.domain'

      if command -v wget >/dev/null; then
        for file in $FILES; do
          URLS=$(grep -oP '(?:\[.*?\]\(\Khttp[s]?://[^\s)]+|(?<!\]\()http[s]?://[^\s>]+)' "$file" | sed 's/]\+$//' | grep -Ev "$IGNORED_DOMAINS" || true)
          if [ -n "$URLS" ]; then
            echo "Checking URLs in $file: $URLS"
            while IFS= read -r url; do
              if ! wget --spider --timeout=5 --tries=1 --user-agent="Mozilla/5.0" "$url" >/dev/null 2>&1; then
                echo "‚ùå Broken URL: $url in $file"
                ERROR_FOUND=true
              fi
            done <<< "$URLS"
          else
            echo "‚ÑπÔ∏è No URLs (excluding ignored domains) in $file"
          fi
        done
      elif command -v curl >/dev/null; then
        for file in $FILES; do
          URLS=$(grep -oP '(?:\[.*?\]\(\Khttp[s]?://[^\s)]+|(?<!\]\()http[s]?://[^\s>]+)' "$file" | sed 's/]\+$//' | grep -Ev "$IGNORED_DOMAINS" || true)
          if [ -n "$URLS" ]; then
            echo "Checking URLs in $file: $URLS"
            while IFS= read -r url; do
              if ! curl --silent --head --fail -A "Mozilla/5.0" -L "$url" --connect-timeout 3 --max-time 5 >/dev/null; then
                echo "‚ùå Broken URL: $url in $file"
                ERROR_FOUND=true
              fi
            done <<< "$URLS"
          else
            echo "‚ÑπÔ∏è No URLs (excluding ignored domains) in $file"
          fi
        done
      else
        echo "‚ö†Ô∏è Skipping URL checks: wget or curl not found"
      fi


      # Empty line after front matter
      for file in $FILES; do
        if grep -q '^---$' "$file"; then
          if awk '/^---$/ {c++; next} c==1 && /^---$/ {c++; next} c==2 && !/^$/ {print "No empty line"; exit} c==2 && /^$/ {exit}' "$file" | grep -q "No empty line"; then
            echo "‚ùå No empty line after front matter in $file"
            ERROR_FOUND=true
          else
            echo "‚úÖ Empty line after front matter in $file"
          fi
        else
          echo "‚ÑπÔ∏è No front matter in $file"
        fi
      done

      # Final result
      if [ "$ERROR_FOUND" = true ]; then
        echo "üö´ Linting failed."
        exit 1
      else
        echo "üéâ All checks passed!"
        exit 0
      fi